{"version":3,"sources":["helpers/format-date.ts","helpers/format-type.ts","components/pokemon-card.tsx","models/mock-pokemon.ts","services/pokemon-service.ts","components/pokemon-search.tsx","pages/pokemon-list.tsx","components/loader.tsx","pages/pokemon-detail.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","pages/page-not-found.tsx","models/pokemon.ts","pages/pokemon-add.tsx","services/authentication-service.ts","pages/login.tsx","privateRoutes.tsx","App.tsx","index.tsx"],"names":["formatDate","date","Date","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","pokemon","borderColor","useState","setColor","navigate","useNavigate","className","onClick","id","onMouseEnter","onMouseLeave","style","src","picture","alt","name","created","types","map","POKEMONS","hp","cp","PokemonService","this","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","data","isEmpty","find","method","body","JSON","stringify","headers","index","findIndex","filter","push","term","includes","Object","keys","length","console","process","PokemonSearch","setTerm","setPokemons","placeholder","value","onChange","e","target","searchPokemon","handleInputChange","to","PokemonList","useEffect","getPokemons","position","bottom","right","Loader","PokemonsDetail","useParams","setPokemon","getPokemon","width","margin","PokemonForm","isEditForm","isValid","form","setForm","hasType","fieldName","fieldValue","newField","undefined","addPokemon","updatePokemon","isAddForm","validateForm","newForm","startsWith","endsWith","newfield","test","isTypeValid","onSubmit","preventDefault","handleSubmit","deletePokemon","htmlFor","marginBottom","disabled","checked","concat","currentType","selectType","PokemonEdit","PageNotFound","Pokemon","PokemonAdd","getTime","AuthenticationService","username","password","isAuthenticated","setTimeout","Login","message","setMessage","login","PrivateRoutes","component","App","element","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.39917a6d.chunk.js","sourcesContent":["const formatDate = (date: Date = new Date()): string => {\r\n    return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`\r\n}\r\n\r\nexport default formatDate;","const formatType = (type: string): string => {\r\n    let color: string;\r\n   \r\n    switch (type) {\r\n      case 'Feu': \r\n        color = 'red lighten-1'; \r\n        break; \r\n      case 'Eau': \r\n        color = 'blue lighten-1'; \r\n        break; \r\n      case 'Plante': \r\n        color = 'green lighten-1'; \r\n        break; \r\n      case 'Insecte': \r\n        color = 'brown lighten-1'; \r\n        break; \r\n      case 'Normal': \r\n        color = 'grey lighten-3'; \r\n        break; \r\n      case 'Vol': \r\n        color = 'blue lighten-3'; \r\n        break; \r\n      case 'Poison': \r\n        color = 'deep-purple accent-1'; \r\n        break; \r\n      case 'Fée': \r\n        color = 'pink lighten-4'; \r\n        break; \r\n      case 'Psy': \r\n        color = 'deep-purple darken-2'; \r\n        break; \r\n      case 'Electrik': \r\n        color = 'lime accent-1'; \r\n        break; \r\n      case 'Combat': \r\n        color = 'deep-orange'; \r\n        break; \r\n      default: \r\n        color = 'grey'; \r\n        break; \r\n    }\r\n   \r\n    return `chip ${color}`;\r\n  }\r\n\r\n  export default formatType;","import React, { FunctionComponent, useState } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport './pokemon-card.css';\r\nimport formatDate from '../helpers/format-date'\r\nimport formatType from '../helpers/format-type'\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\ntype Props = {\r\n  pokemon: Pokemon,\r\n  borderColor?: string\r\n};\r\n\r\nconst PokemonCard: FunctionComponent<Props> = ({pokemon, borderColor = '#009688'}) => {\r\n  \r\n    const [color, setColor] = useState<string>();\r\n    const navigate = useNavigate();\r\n\r\n\r\n    const showBorder = () => {\r\n        setColor(borderColor);\r\n    }\r\n\r\n    const hideBorder = () => {\r\n        setColor('#f5f5f5'); //On remet la bordure en gris\r\n    }\r\n\r\n    const goToPokemon = (id: number) =>{\r\n        navigate(`/pokemons/${id}`);\r\n    }\r\n\r\n  return ( \r\n    <div className=\"col s6 m4\" onClick={() => goToPokemon(pokemon.id)} onMouseEnter={showBorder} onMouseLeave={hideBorder}>\r\n      <div className=\"card horizontal\" style={{ borderColor: color}}>\r\n        <div className=\"card-image\"> \r\n          <img src={pokemon.picture} alt={pokemon.name}/>\r\n        </div>\r\n        <div className=\"card-stacked\">\r\n          <div className=\"card-content\">\r\n            <p>{pokemon.name}</p>\r\n            <p><small>{formatDate(pokemon.created)}</small></p>\r\n            {pokemon.types.map(type =>(\r\n                <span key={type} className={formatType(type)}>{type}</span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div> \r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonCard;","import Pokemon from './pokemon';\r\n   \r\nexport const POKEMONS: Pokemon[] = [\r\n {\r\n  id: 1,\r\n  name: \"Bulbizarre\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\r\n  types: [\"Plante\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 2,\r\n  name: \"Salamèche\",\r\n  hp: 28,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 3,\r\n  name: \"Carapuce\",\r\n  hp: 21,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\r\n  types: [\"Eau\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 4,\r\n  name: \"Aspicot\",\r\n  hp: 16,\r\n  cp: 2,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\r\n  types: [\"Insecte\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 5,\r\n  name: \"Roucool\",\r\n  hp: 30,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 6,\r\n  name: \"Rattata\",\r\n  hp: 18,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 7,\r\n  name: \"Piafabec\",\r\n  hp: 14,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 8,\r\n  name: \"Abo\",\r\n  hp: 16,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\r\n  types: [\"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 9,\r\n  name: \"Pikachu\",\r\n  hp: 21,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\r\n  types: [\"Electrik\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 10,\r\n  name: \"Sabelette\",\r\n  hp: 19,\r\n  cp: 3,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 11,\r\n  name: \"Mélofée\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\r\n  types: [\"Fée\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 12,\r\n  name: \"Groupix\",\r\n  hp: 17,\r\n  cp: 8,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n }\r\n];\r\n  \r\nexport default POKEMONS;","import Pokemon from \"../models/pokemon\";\r\nimport POKEMONS from \"../models/mock-pokemon\";\r\n  \r\nexport default class PokemonService {\r\n  \r\n  static pokemons:Pokemon[] = POKEMONS;\r\n  \r\n  static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\r\n  \r\n  static getPokemons(): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch('http://localhost:3001/pokemons')\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      resolve(this.pokemons);\r\n    });\r\n  }\r\n  \r\n  static getPokemon(id: number): Promise<Pokemon|null> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${id}`)\r\n      .then(response => response.json())\r\n      .then(data => this.isEmpty(data) ? null : data)\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      resolve(this.pokemons.find(pokemon => id === pokemon.id));\r\n    }); \r\n  }\r\n  \r\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      const { id } = pokemon;\r\n      const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\r\n      this.pokemons[index] = pokemon;\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static deletePokemon(pokemon: Pokemon): Promise<{}> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const { id } = pokemon;\r\n      this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\r\n      resolve({});\r\n    }); \r\n  }\r\n  \r\n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    pokemon.created = new Date(pokemon.created);\r\n  \r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      this.pokemons.push(pokemon);\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static searchPokemon(term: string): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons?q=${term}`)\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\r\n      resolve(results);\r\n    });\r\n  \r\n  }\r\n  \r\n  static isEmpty(data: Object): boolean {\r\n    return Object.keys(data).length === 0;\r\n  }\r\n  \r\n  static handleError(error: Error): void {\r\n    console.error(error);\r\n  }\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from '../services/pokemon-service';\r\n \r\nconst PokemonSearch: FunctionComponent = () => {\r\n  \r\n  const [term, setTerm] = useState<string>('');\r\n  //probleme  entre array et object avec typeScript voir :\r\n  // https://www.web-dev-qa-db-fra.com/fr/typescript/largument-de-type-...-nest-pas-attribuable-au-parametre-de-type-...-ts-2345/809583851/\r\n  const [pokemons, setPokemons] = useState<Pokemon[] | any>([]);\r\n \r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const term = e.target.value;\r\n    setTerm(term);\r\n    if(term.length <= 1) {\r\n      setPokemons([]);\r\n      return;\r\n    }\r\n \r\n    PokemonService.searchPokemon(term).then(pokemons => setPokemons(pokemons));\r\n  }\r\n  \r\n  return (\r\n    <div className=\"row\"> \r\n    <div className=\"col s12 m6 offset-m3\"> \r\n      <div className=\"card\"> \r\n      <div className=\"card-content\"> \r\n        <div className=\"input-field\"> \r\n        <input type=\"text\" placeholder=\"Rechercher un pokémon\" value={term} onChange={e => handleInputChange(e)} /> \r\n        </div> \r\n        <div className='collection'>\r\n        {/* ajout ici sur le paramètre pokemon de tout les types a cause du problème si dessus rechercher une meilleure solution */}\r\n        {pokemons.map((pokemon: { id: React.Key | undefined; name: boolean | React.ReactChild | React.ReactFragment | React.ReactPortal | null | undefined; }) => (\r\n          <Link key={pokemon.id} to={`/pokemons/${pokemon.id}`} className=\"collection-item\">\r\n            {pokemon.name}\r\n          </Link>\r\n        ))}\r\n        </div> \r\n      </div> \r\n      </div> \r\n    </div> \r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonSearch;","import React, { FunctionComponent, useState, useEffect } from \"react\";\r\nimport Pokemon from \"../models/pokemon\";\r\nimport PokemonCard from \"../components/pokemon-card\";\r\nimport PokemonService from \"../services/pokemon-service\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PokemonSearch from \"../components/pokemon-search\";\r\n\r\nconst PokemonList: FunctionComponent = () => {\r\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n\r\n  useEffect(() => {\r\n    PokemonService.getPokemons().then((pokemons) => setPokemons(pokemons));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"center\">Pokédex</h1>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <PokemonSearch />\r\n          {pokemons.map((pokemon) => (\r\n            <PokemonCard key={pokemon.id} pokemon={pokemon} />\r\n          ))}\r\n        </div>\r\n        <Link\r\n          className=\"btn-floating btn-large waves-effect waves-light red z-depth-3\"\r\n          style={{ position: \"fixed\", bottom: \"25px\", right: \"25px\" }}\r\n          to=\"/pokemon/add\"\r\n        >\r\n          <i className=\"material-icons\">add</i>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonList;\r\n","import React, { FunctionComponent } from 'react';\r\n  \r\nconst Loader: FunctionComponent = () => {\r\n   \r\n  return (\r\n    <div className=\"preloader-wrapper big active\"> \r\n      <div className=\"spinner-layer spinner-blue\"> \r\n        <div className=\"circle-clipper left\"> \r\n          <div className=\"circle\"></div> \r\n        </div>\r\n        <div className=\"gap-patch\"> \r\n          <div className=\"circle\"></div> \r\n        </div><div className=\"circle-clipper right\"> \r\n          <div className=\"circle\"></div> \r\n        </div>\r\n      </div> \r\n   </div> \r\n  );\r\n}\r\n   \r\nexport default Loader;","import React, { FunctionComponent, useState, useEffect } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport Pokemon from \"../models/pokemon\";\r\nimport formatDate from \"../helpers/format-date\";\r\nimport formatType from \"../helpers/format-type\";\r\nimport PokemonService from \"../services/pokemon-service\";\r\nimport Loader from \"../components/loader\";\r\n\r\n//gestion du probleme de type undefinded avec le type any ????\r\ntype Params= { id: string | any };\r\n\r\nconst PokemonsDetail: FunctionComponent<Params> = () => {\r\n  //ici useParams remplace l'utilisation de match.params.id dans la constante id\r\n  const { id } = useParams<Params>();\r\n\r\n  const [pokemon, setPokemon] = useState<Pokemon | null>(null);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    PokemonService.getPokemon(+id).then(pokemon => setPokemon(pokemon));\r\n  }, [id])\r\n\r\n  //version avec le ficier pokemon service qui gere les requetes\r\n  //   fetch(`http://localhost:3001/pokemons/${id}`)\r\n  //   .then(reponse => reponse.json())\r\n  //   .then(pokemon => {\r\n  //     if(pokemon.id) setPokemon(pokemon);\r\n  //   })\r\n  //}, [id])\r\n\r\n  //version avant api/rest\r\n  // useEffect(() => {\r\n  //   POKEMONS.forEach((pokemon) => {\r\n  //     if (id === pokemon.id.toString()) {\r\n  //       setPokemon(pokemon);\r\n  //     }\r\n  //   });\r\n  // }, [id]);\r\n\r\n  return (\r\n    <div>\r\n      {pokemon ? (\r\n        <div className=\"row\">\r\n          <div className=\"col s12 m8 offset-m2\">\r\n            <h2 className=\"header center\">{pokemon.name}</h2>\r\n            <div className=\"card hoverable\">\r\n              <div className=\"card-image\">\r\n                <img\r\n                  src={pokemon.picture}\r\n                  alt={pokemon.name}\r\n                  style={{ width: \"250px\", margin: \"0 auto\" }}\r\n                />\r\n                <Link\r\n                  to={`/pokemons/edit/${pokemon.id}`}\r\n                  className=\"btn btn-floating halfway-fab waves-effect waves-light\"\r\n                >\r\n                  <i className=\"material-icons\">edit</i>\r\n                </Link>\r\n              </div>\r\n              <div className=\"card-stacked\">\r\n                <div className=\"card-content\">\r\n                  <table className=\"bordered striped\">\r\n                    <tbody>\r\n                      <tr>\r\n                        <td>Nom</td>\r\n                        <td>\r\n                          <strong>{pokemon.name}</strong>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>Points de vie</td>\r\n                        <td>\r\n                          <strong>{pokemon.hp}</strong>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>Dégâts</td>\r\n                        <td>\r\n                          <strong>{pokemon.cp}</strong>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>Types</td>\r\n                        <td>\r\n                          {pokemon.types.map((type) => (\r\n                            <span key={type} className={formatType(type)}>\r\n                              {type}\r\n                            </span>\r\n                          ))}\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td>Date de création</td>\r\n                        <td>{formatDate(pokemon.created)}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n                <div className=\"card-action\">\r\n                  <Link to=\"/\">Retour</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h4 className=\"center\"><Loader/></h4>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonsDetail;\r\n","import React, { FunctionComponent, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n//import { useHistory } from 'react-router-dom';// code deprécié remplacé par la ligne du dessus avec use navigate\r\nimport Pokemon from \"../models/pokemon\";\r\nimport formatType from \"../helpers/format-type\";\r\nimport PokemonService from \"../services/pokemon-service\";\r\n\r\ntype Props = {\r\n  pokemon: Pokemon;\r\n  isEditForm: boolean;\r\n};\r\n\r\ntype Field = {\r\n  value: any;\r\n  error?: string;\r\n  isValid?: boolean;\r\n};\r\n\r\ntype Form = {\r\n  picture: Field;\r\n  name: Field;\r\n  hp: Field;\r\n  cp: Field;\r\n  types: Field;\r\n};\r\n\r\nconst PokemonForm: FunctionComponent<Props> = ({ pokemon, isEditForm }) => {\r\n  const [form, setForm] = useState<Form>({\r\n    picture: { value: pokemon.picture },\r\n    name: { value: pokemon.name, isValid: true },\r\n    hp: { value: pokemon.hp, isValid: true },\r\n    cp: { value: pokemon.cp, isValid: true },\r\n    types: { value: pokemon.types, isValid: true },\r\n  });\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const types: string[] = [\r\n    \"Plante\",\r\n    \"Feu\",\r\n    \"Eau\",\r\n    \"Insecte\",\r\n    \"Normal\",\r\n    \"Electrik\",\r\n    \"Poison\",\r\n    \"Fée\",\r\n    \"Vol\",\r\n    \"Combat\",\r\n    \"Psy\",\r\n  ];\r\n\r\n  const hasType = (type: string): boolean => {\r\n    return form.types.value.includes(type);\r\n  };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const fieldName: string = e.target.name;\r\n    const fieldValue: string = e.target.value;\r\n    const newField: Field = {\r\n      [fieldName]: { value: fieldValue },\r\n      value: undefined,\r\n    };\r\n\r\n    setForm({ ...form, ...newField });\r\n  };\r\n\r\n  const selectType = (\r\n    type: string,\r\n    e: React.ChangeEvent<HTMLInputElement>\r\n  ): void => {\r\n    const checked = e.target.checked;\r\n    let newField: Field;\r\n\r\n    if (checked) {\r\n      // Si l'utilisateur coche un type, on l'ajoute a la liste des types du pokemon.\r\n      const newTypes: string[] = form.types.value.concat([type]);\r\n      newField = { value: newTypes };\r\n    } else {\r\n      //Si l'utilisateur décoche un type, on le retire de la liste des types du pokemon.\r\n      const newTypes: string[] = form.types.value.filter(\r\n        (currentType: string) => currentType !== type\r\n      );\r\n      newField = { value: newTypes };\r\n    }\r\n\r\n    setForm({ ...form, ...{ types: newField } });\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const isFormValid = validateForm();\r\n\r\n    if (isFormValid) {\r\n      pokemon.picture = form.picture.value;\r\n      pokemon.name = form.name.value;\r\n      pokemon.hp = form.hp.value;\r\n      pokemon.cp = form.cp.value;\r\n      pokemon.types = form.types.value;\r\n\r\n      isEditForm ? updatePokemon() : addPokemon();\r\n    }\r\n  };\r\n\r\n  const addPokemon = () => {\r\n    //ici la ligne obsolète la méthode .push n'est plus utilisé\r\n    //history.push(`/pokemons/${pokemon.id}`);\r\n    PokemonService.addPokemon(pokemon).then(() => navigate(\"/pokemons\"));\r\n  };\r\n\r\n  const updatePokemon = () => {\r\n    PokemonService.updatePokemon(pokemon).then(() =>\r\n      navigate(`/pokemons/${pokemon.id}`)\r\n    );\r\n  };\r\n\r\n  const isAddForm = () => {\r\n    return !isEditForm;\r\n  };\r\n\r\n  const validateForm = () => {\r\n    let newForm: Form = form;\r\n\r\n    //validator url\r\n    if (isAddForm()) {\r\n      const start =\r\n      \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\r\n      const end = \".png\";\r\n\r\n      if (\r\n        !form.picture.value.startsWith(start) ||\r\n        !form.picture.value.endsWith(end)\r\n      ) {\r\n        const errorMsg: string = \"l'url n'est pas valide\";\r\n        const newField: Field = {\r\n          value: form.picture.value,\r\n          error: errorMsg,\r\n          isValid: false,\r\n        };\r\n        newForm = { ...form, ...{ picture: newField } };\r\n      } else {\r\n        const newfield: Field = {\r\n          value: form.picture.value,\r\n          error: '',\r\n          isValid: true,\r\n        };\r\n        newForm = { ...form, ...{ picture: newfield } };\r\n      }\r\n    }\r\n\r\n    // Validator name\r\n    if (!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\r\n      const errorMsg: string = \"Le nom du pokémon est requis (1-25).\";\r\n      const newField: Field = {\r\n        value: form.name.value,\r\n        error: errorMsg,\r\n        isValid: false,\r\n      };\r\n      newForm = { ...newForm, ...{ name: newField } };\r\n    } else {\r\n      const newField: Field = {\r\n        value: form.name.value,\r\n        error: \"\",\r\n        isValid: true,\r\n      };\r\n      newForm = { ...newForm, ...{ name: newField } };\r\n    }\r\n\r\n    // Validator hp\r\n    if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\r\n      const errorMsg: string =\r\n        \"Les points de vie du pokémon sont compris entre 0 et 999.\";\r\n      const newField: Field = {\r\n        value: form.hp.value,\r\n        error: errorMsg,\r\n        isValid: false,\r\n      };\r\n      newForm = { ...newForm, ...{ hp: newField } };\r\n    } else {\r\n      const newField: Field = {\r\n        value: form.hp.value,\r\n        error: \"\",\r\n        isValid: true,\r\n      };\r\n      newForm = { ...newForm, ...{ hp: newField } };\r\n    }\r\n\r\n    // Validator cp\r\n    if (!/^[0-9]{1,2}$/.test(form.cp.value)) {\r\n      const errorMsg: string =\r\n        \"Les dégâts du pokémon sont compris entre 0 et 99\";\r\n      const newField: Field = {\r\n        value: form.cp.value,\r\n        error: errorMsg,\r\n        isValid: false,\r\n      };\r\n      newForm = { ...newForm, ...{ cp: newField } };\r\n    } else {\r\n      const newField: Field = {\r\n        value: form.cp.value,\r\n        error: \"\",\r\n        isValid: true,\r\n      };\r\n      newForm = { ...newForm, ...{ cp: newField } };\r\n    }\r\n\r\n    setForm(newForm);\r\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\r\n  };\r\n\r\n  const isTypeValid = (type: string): boolean => {\r\n    if (form.types.value.length === 1 && hasType(type)) {\r\n      return false;\r\n    }\r\n    if (form.types.value.length >= 3 && !hasType(type)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const deletePokemon = () => {\r\n    PokemonService.deletePokemon(pokemon).then(() => navigate(`/pokemons`));\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={(e) => handleSubmit(e)}>\r\n      <div className=\"row\">\r\n        <div className=\"col s12 m8 offset-m2\">\r\n          <div className=\"card hoverable\">\r\n            {isEditForm && (\r\n              <div className=\"card-image\">\r\n                <img\r\n                  src={pokemon.picture}\r\n                  alt={pokemon.name}\r\n                  style={{ width: \"250px\", margin: \"0 auto\" }}\r\n                />\r\n                <span className=\"btn-floating halfway-fab waves-effect waves-light\">\r\n                  <i onClick={deletePokemon} className=\"material-icons\">\r\n                    delete\r\n                  </i>\r\n                </span>\r\n              </div>\r\n            )}\r\n            <div className=\"card-stacked\">\r\n              <div className=\"card-content\">\r\n                {/* Pokemon picture */}\r\n                {isAddForm() && (\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"name\">Image</label>\r\n                    <input\r\n                      id=\"picture\"\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      value={form.picture.value}\r\n                      name=\"picture\"\r\n                      onChange={(e) => handleInputChange(e)}\r\n                    ></input>\r\n                    {form.picture.error && (\r\n                      <div className=\"card-panel red accent-1\">\r\n                        {form.picture.error}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n                {/* Pokemon name */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"name\">Nom</label>\r\n                  <input\r\n                    id=\"name\"\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    value={form.name.value}\r\n                    name=\"name\"\r\n                    onChange={(e) => handleInputChange(e)}\r\n                  ></input>\r\n                  {form.name.error && (\r\n                    <div className=\"card-panel red accent-1\">\r\n                      {form.name.error}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                {/* Pokemon hp */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"hp\">Point de vie</label>\r\n                  <input\r\n                    id=\"hp\"\r\n                    type=\"number\"\r\n                    className=\"form-control\"\r\n                    value={form.hp.value}\r\n                    name=\"hp\"\r\n                    onChange={(e) => handleInputChange(e)}\r\n                  ></input>\r\n                  {form.hp.error && (\r\n                    <div className=\"card-panel red accent-1\">\r\n                      {form.hp.error}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                {/* Pokemon cp */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"cp\">Dégâts</label>\r\n                  <input\r\n                    id=\"cp\"\r\n                    type=\"number\"\r\n                    className=\"form-control\"\r\n                    value={form.cp.value}\r\n                    name=\"cp\"\r\n                    onChange={(e) => handleInputChange(e)}\r\n                  ></input>\r\n                  {form.cp.error && (\r\n                    <div className=\"card-panel red accent-1\">\r\n                      {form.cp.error}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                {/* Pokemon types */}\r\n                <div className=\"form-group\">\r\n                  <label>Types</label>\r\n                  {types.map((type) => (\r\n                    <div key={type} style={{ marginBottom: \"10px\" }}>\r\n                      <label>\r\n                        <input\r\n                          id={type}\r\n                          type=\"checkbox\"\r\n                          className=\"filled-in\"\r\n                          value={type}\r\n                          disabled={!isTypeValid(type)}\r\n                          checked={hasType(type)}\r\n                          onChange={(e) => selectType(type, e)}\r\n                        ></input>\r\n                        <span>\r\n                          <p className={formatType(type)}>{type}</p>\r\n                        </span>\r\n                      </label>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div className=\"card-action center\">\r\n                {/* Submit button */}\r\n                <button type=\"submit\" className=\"btn\">\r\n                  Valider\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PokemonForm;\r\n","\r\nimport React, { FunctionComponent, useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Loader from \"../components/loader\";\r\nimport PokemonForm from \"../components/pokemon-form\";\r\nimport Pokemon from \"../models/pokemon\";\r\nimport PokemonService from \"../services/pokemon-service\";\r\n\r\ntype Params = { id: string | any};\r\n\r\nconst PokemonEdit: FunctionComponent<Params> = () => {\r\n  const { id } = useParams<Params>();\r\n  const [pokemon, setPokemon] = useState<Pokemon | null>(null);\r\n\r\n  useEffect(() => {\r\n    PokemonService.getPokemon(+id).then(pokemon => setPokemon(pokemon));\r\n  }, [id]);\r\n\r\n  return (\r\n    <div>\r\n      {pokemon ? (\r\n        <div className=\"row\">\r\n          <h2 className=\"header center\">Éditer {pokemon.name}</h2>\r\n          <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\r\n        </div>\r\n      ) : (\r\n        <h4 className=\"center\"><Loader/></h4>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonEdit;\r\n","import React, { FunctionComponent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n  \r\nconst PageNotFound: FunctionComponent = () => {\r\n  \r\n  return (\r\n    <div className=\"center\">\r\n      <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\r\n      <h1>Hey, cette page n'existe pas !</h1> \r\n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\r\n        Retourner à l'accueil\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PageNotFound;","export default class Pokemon {\r\n    // 1. Typage des propiétés d'un pokémon.\r\n    id: number;\r\n    hp: number;\r\n    cp: number;\r\n    name: string;\r\n    picture: string;\r\n    types: Array<string>;\r\n    created?: Date;\r\n     \r\n    // 2. Définition des valeurs par défaut des propriétés d'un pokémon.\r\n    constructor(\r\n     id: number,\r\n     hp: number = 100,\r\n     cp: number = 10,\r\n     name: string = '...',\r\n     picture: string = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/XXX.png',\r\n     types: Array<string> = ['Normal'],\r\n     created: Date = new Date()\r\n    ) {\r\n     // 3. Initialisation des propiétés d'un pokémons.\r\n     this.id = id;\r\n     this.hp = hp;\r\n     this.cp = cp;\r\n     this.name = name;\r\n     this.picture = picture;\r\n     this.types = types;\r\n     this.created = created;\r\n    }\r\n   }","import React, { FunctionComponent, useState } from 'react';\r\nimport PokemonForm from '../components/pokemon-form';\r\nimport Pokemon from '../models/pokemon';\r\n \r\nconst PokemonAdd: FunctionComponent = () => {\r\n\r\n  const [id] = useState<number>(new Date().getTime());\r\n  const [pokemon] = useState<Pokemon>(new Pokemon(id));\r\n   \r\n  return (\r\n    <div className=\"row\">\r\n      <h2 className=\"header center\">Ajouter un pokémon</h2>\r\n      <PokemonForm pokemon={pokemon} isEditForm={false}></PokemonForm>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default PokemonAdd;","export default class AuthenticationService {\r\n    static isAuthenticated: boolean = false;\r\n\r\n    static login(username: string, password: string): Promise<boolean> {\r\n        const isAuthenticated = (username === 'pikachu' && password ==='pikachu');\r\n\r\n        return new Promise(resolve =>{\r\n            setTimeout(() =>{\r\n                this.isAuthenticated =isAuthenticated;\r\n                resolve(isAuthenticated)\r\n            }, 1000);\r\n        });\r\n    }\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport AuthenticationService from '../services/authentication-service';\r\n\r\ntype Field = {\r\n  value?: any,\r\n  error?: string,\r\n  isValid?: boolean\r\n};\r\n\r\ntype Form = {\r\n  username: Field,\r\n  password: Field\r\n}\r\n\r\nconst Login: FunctionComponent = () => {\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [form, setForm] = useState<Form>({\r\n    username: { value: '' },\r\n    password: { value: '' },\r\n  });\r\n\r\n  const [message, setMessage] = useState<string>('Vous êtes déconnecté. (pikachu / pikachu)');\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const fieldName: string = e.target.name;\r\n    const fieldValue: string = e.target.value;\r\n    const newField: Field = { [fieldName]: { value: fieldValue } };\r\n\r\n    setForm({ ...form, ...newField});\r\n  }\r\n\r\n  const validateForm = () => {\r\n    let newForm: Form = form;\r\n\r\n    // Validator username\r\n    if(form.username.value.length < 3) {\r\n      const errorMsg: string = 'Votre prénom doit faire au moins 3 caractères de long.';\r\n      const newField: Field = { value: form.username.value, error: errorMsg, isValid: false };\r\n      newForm = { ...newForm, ...{ username: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.username.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ username: newField } };\r\n    }\r\n\r\n    // Validator password\r\n    if(form.password.value.length < 6) {\r\n      const errorMsg: string = 'Votre mot de passe doit faire au moins 6 caractères de long.';\r\n      const newField: Field = {value: form.password.value, error: errorMsg, isValid: false};\r\n      newForm = { ...newForm, ...{ password: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.password.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ password: newField } };\r\n    }\r\n\r\n    setForm(newForm);\r\n\r\n    return newForm.username.isValid && newForm.password.isValid;\r\n  }\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const isFormValid = validateForm();\r\n    if(isFormValid) {\r\n      setMessage('👉 Tentative de connexion en cours ...');\r\n      AuthenticationService.login(form.username.value, form.password.value).then(isAuthenticated => {\r\n        if(!isAuthenticated) {\r\n          setMessage('🔐 Identifiant ou mot de passe incorrect.');\r\n          return;\r\n        }\r\n        \r\n        navigate('/pokemons');\r\n        \r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={(e) => handleSubmit(e)}>\r\n      <div className=\"row\">\r\n        <div className=\"col s12 m8 offset-m2\">\r\n          <div className=\"card hoverable\">\r\n            <div className=\"card-stacked\">\r\n              <div className=\"card-content\">\r\n                {/* Form message */}\r\n                {message && <div className=\"form-group\">\r\n                  <div className=\"card-panel grey lighten-5\">\r\n                    {message}\r\n                  </div>\r\n                </div>}\r\n                {/* Field username */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"username\">Identifiant</label>\r\n                  <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\" value={form.username.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.username.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.username.error} \r\n                  </div>} \r\n                </div>\r\n                {/* Field password */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"password\">Mot de passe</label>\r\n                  <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" value={form.password.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.password.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.password.error} \r\n                  </div>} \r\n                </div>\r\n              </div>\r\n              <div className=\"card-action center\">\r\n                {/* Submit button */}\r\n                <button type=\"submit\" className=\"btn\">Valider</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n \r\nexport default Login;","import React from 'react';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\nimport AuthenticationService from './services/authentication-service';\r\n  \r\nconst PrivateRoutes = ({ component: Component, ...rest }: any) => {\r\n \r\n    const isAuthenticated = AuthenticationService.isAuthenticated;\r\n      \r\n      return  isAuthenticated ? <Outlet /> : <Navigate to='/login' />\r\n  }\r\n  \r\nexport default PrivateRoutes;","import React, { FunctionComponent } from \"react\";\r\nimport PokemonList from \"./pages/pokemon-list\";\r\nimport PokemonsDetail from \"./pages/pokemon-detail\";\r\nimport { BrowserRouter, Routes, Route, Link } from \"react-router-dom\";\r\nimport PokemonEdit from \"./pages/pokemon-edit\";\r\nimport PageNotFound from \"./pages/page-not-found\";\r\nimport PokemonAdd from \"./pages/pokemon-add\";\r\nimport Login from \"./pages/login\";\r\nimport PrivateRoutes from \"./privateRoutes\";\r\n\r\nconst App: FunctionComponent = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      {/* Barre de navigation présente sur toutes les pages */}\r\n      <nav>\r\n        <div className=\"nav-wrapper teal\">\r\n          <Link to=\"/\" className=\"brand-logo center\">\r\n            Pokédex\r\n          </Link>\r\n        </div>\r\n      </nav>\r\n      {/* routes de l'application. Le selecteur \"*\" est a mettre en dernier */}\r\n      <Routes>\r\n        <Route element={<PrivateRoutes />}>\r\n          <Route path=\"/\" element={<PokemonList />} />\r\n          <Route path=\"/pokemons\" element={<PokemonList />} />\r\n          <Route path=\"/pokemon/add\" element={<PokemonAdd />} />\r\n          <Route\r\n            path=\"/pokemons/edit/:id\"\r\n            element={<PokemonEdit id={undefined} />}\r\n          />\r\n          <Route\r\n            path=\"/pokemons/:id\"\r\n            element={<PokemonsDetail id={undefined} />}\r\n          />\r\n        </Route>\r\n\r\n        <Route path=\"/Login\" element={<Login />} />\r\n        <Route path=\"*\" element={<PageNotFound />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}